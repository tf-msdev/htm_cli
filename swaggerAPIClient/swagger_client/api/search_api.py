# coding: utf-8

"""
    HOT Tasking Manager API

    API endpoints for the HOT tasking manager  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_project_search_get(self, accept_language, **kwargs):  # noqa: E501
        """Search active projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_search_get(accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param str authorization: Base64 encoded session token
        :param str mapper_level:
        :param str mapping_types:
        :param str organisation_tag:
        :param str campaign_tag:
        :param int page: Page of results user requested
        :param str text_search: text to search
        :param str project_statuses: Authenticated PMs can search for archived or draft statuses
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_search_get_with_http_info(accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_search_get_with_http_info(accept_language, **kwargs)  # noqa: E501
            return data

    def api_v1_project_search_get_with_http_info(self, accept_language, **kwargs):  # noqa: E501
        """Search active projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_search_get_with_http_info(accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param str authorization: Base64 encoded session token
        :param str mapper_level:
        :param str mapping_types:
        :param str organisation_tag:
        :param str campaign_tag:
        :param int page: Page of results user requested
        :param str text_search: text to search
        :param str project_statuses: Authenticated PMs can search for archived or draft statuses
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'authorization', 'mapper_level', 'mapping_types', 'organisation_tag', 'campaign_tag', 'page', 'text_search', 'project_statuses']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_search_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mapper_level' in params:
            query_params.append(('mapperLevel', params['mapper_level']))  # noqa: E501
        if 'mapping_types' in params:
            query_params.append(('mappingTypes', params['mapping_types']))  # noqa: E501
        if 'organisation_tag' in params:
            query_params.append(('organisationTag', params['organisation_tag']))  # noqa: E501
        if 'campaign_tag' in params:
            query_params.append(('campaignTag', params['campaign_tag']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'text_search' in params:
            query_params.append(('textSearch', params['text_search']))  # noqa: E501
        if 'project_statuses' in params:
            query_params.append(('projectStatuses', params['project_statuses']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_projects_within_bounding_box_get(self, authorization, accept_language, created_by_me, **kwargs):  # noqa: E501
        """Search for projects by bbox projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_projects_within_bounding_box_get(authorization, accept_language, created_by_me, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param bool created_by_me: limit to projects created by authenticated user (required)
        :param str bbox: comma separated list xmin, ymin, xmax, ymax
        :param int srid: srid of bbox coords
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_projects_within_bounding_box_get_with_http_info(authorization, accept_language, created_by_me, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_projects_within_bounding_box_get_with_http_info(authorization, accept_language, created_by_me, **kwargs)  # noqa: E501
            return data

    def api_v1_projects_within_bounding_box_get_with_http_info(self, authorization, accept_language, created_by_me, **kwargs):  # noqa: E501
        """Search for projects by bbox projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_projects_within_bounding_box_get_with_http_info(authorization, accept_language, created_by_me, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param bool created_by_me: limit to projects created by authenticated user (required)
        :param str bbox: comma separated list xmin, ymin, xmax, ymax
        :param int srid: srid of bbox coords
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'created_by_me', 'bbox', 'srid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_projects_within_bounding_box_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_projects_within_bounding_box_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_projects_within_bounding_box_get`")  # noqa: E501
        # verify the required parameter 'created_by_me' is set
        if ('created_by_me' not in params or
                params['created_by_me'] is None):
            raise ValueError("Missing the required parameter `created_by_me` when calling `api_v1_projects_within_bounding_box_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bbox' in params:
            query_params.append(('bbox', params['bbox']))  # noqa: E501
        if 'srid' in params:
            query_params.append(('srid', params['srid']))  # noqa: E501
        if 'created_by_me' in params:
            query_params.append(('createdByMe', params['created_by_me']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/within-bounding-box', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
