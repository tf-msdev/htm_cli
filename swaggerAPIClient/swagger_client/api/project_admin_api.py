# coding: utf-8

"""
    HOT Tasking Manager API

    API endpoints for the HOT tasking manager  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProjectAdminApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_admin_my_projects_get(self, authorization, accept_language, **kwargs):  # noqa: E501
        """Get all projects for logged in admin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_my_projects_get(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_my_projects_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_my_projects_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_my_projects_get_with_http_info(self, authorization, accept_language, **kwargs):  # noqa: E501
        """Get all projects for logged in admin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_my_projects_get_with_http_info(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_my_projects_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_my_projects_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_admin_my_projects_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/my-projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_comments_get(self, project_id, **kwargs):  # noqa: E501
        """Gets all comments for project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_comments_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_comments_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_comments_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_comments_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets all comments for project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_comments_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_comments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_delete(self, authorization, project_id, **kwargs):  # noqa: E501
        """Deletes a Tasking-Manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_delete(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_delete_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_delete_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_delete_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Deletes a Tasking-Manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_delete_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_delete`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_get(self, authorization, project_id, **kwargs):  # noqa: E501
        """Retrieves a Tasking-Manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_get(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_get_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_get_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_get_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Retrieves a Tasking-Manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_get_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_get`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_invalidate_all_post(self, authorization, project_id, **kwargs):  # noqa: E501
        """Invalidate all mapped tasks on a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_invalidate_all_post(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_invalidate_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_invalidate_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_invalidate_all_post_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Invalidate all mapped tasks on a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_invalidate_all_post_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_invalidate_all_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_invalidate_all_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_invalidate_all_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}/invalidate-all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_map_all_post(self, authorization, project_id, **kwargs):  # noqa: E501
        """Map all tasks on a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_map_all_post(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_map_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_map_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_map_all_post_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Map all tasks on a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_map_all_post_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_map_all_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_map_all_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_map_all_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}/map-all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_post(self, body, authorization, project_id, **kwargs):  # noqa: E501
        """Updates a Tasking-Manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_post(body, authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_post_with_http_info(body, authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_post_with_http_info(body, authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_post_with_http_info(self, body, authorization, project_id, **kwargs):  # noqa: E501
        """Updates a Tasking-Manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_post_with_http_info(body, authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_admin_project_project_id_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_reset_all_badimagery_post(self, authorization, project_id, **kwargs):  # noqa: E501
        """Mark all bad imagery tasks ready for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_reset_all_badimagery_post(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_reset_all_badimagery_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_reset_all_badimagery_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_reset_all_badimagery_post_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Mark all bad imagery tasks ready for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_reset_all_badimagery_post_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_reset_all_badimagery_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_reset_all_badimagery_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_reset_all_badimagery_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}/reset-all-badimagery', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_reset_all_post(self, authorization, project_id, **kwargs):  # noqa: E501
        """Reset all tasks on project back to ready, preserving history.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_reset_all_post(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_reset_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_reset_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_reset_all_post_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Reset all tasks on project back to ready, preserving history.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_reset_all_post_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_reset_all_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_reset_all_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_reset_all_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}/reset-all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_transfer_post(self, body, authorization, project_id, **kwargs):  # noqa: E501
        """Transfers a project to a new user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_transfer_post(body, authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: the username of the new owner (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_transfer_post_with_http_info(body, authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_transfer_post_with_http_info(body, authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_transfer_post_with_http_info(self, body, authorization, project_id, **kwargs):  # noqa: E501
        """Transfers a project to a new user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_transfer_post_with_http_info(body, authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: the username of the new owner (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_admin_project_project_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_transfer_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_project_id_validate_all_post(self, authorization, project_id, **kwargs):  # noqa: E501
        """Validate all mapped tasks on a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_validate_all_post(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_project_id_validate_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_project_id_validate_all_post_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_project_id_validate_all_post_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Validate all mapped tasks on a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_project_id_validate_all_post_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The unique project ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_project_id_validate_all_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_project_id_validate_all_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_admin_project_project_id_validate_all_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project/{project_id}/validate-all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_admin_project_put(self, body, authorization, **kwargs):  # noqa: E501
        """Creates a tasking-manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_put(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str authorization: Base64 encoded session token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_admin_project_put_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_admin_project_put_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def api_v1_admin_project_put_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Creates a tasking-manager project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_admin_project_put_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str authorization: Base64 encoded session token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_admin_project_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_admin_project_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_admin_project_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/admin/project', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_annotations_annotation_type_get(self, project_id, annotation_type, **kwargs):  # noqa: E501
        """Get all task annotations for a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_annotation_type_get(project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project (required)
        :param str annotation_type: The type of annotation to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_annotations_annotation_type_get_with_http_info(project_id, annotation_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_annotations_annotation_type_get_with_http_info(project_id, annotation_type, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_annotations_annotation_type_get_with_http_info(self, project_id, annotation_type, **kwargs):  # noqa: E501
        """Get all task annotations for a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_annotation_type_get_with_http_info(project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project (required)
        :param str annotation_type: The type of annotation to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_annotations_annotation_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_annotations_annotation_type_get`")  # noqa: E501
        # verify the required parameter 'annotation_type' is set
        if ('annotation_type' not in params or
                params['annotation_type'] is None):
            raise ValueError("Missing the required parameter `annotation_type` when calling `api_v1_project_project_id_task_annotations_annotation_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_type' in params:
            path_params['annotation_type'] = params['annotation_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task-annotations/{annotation_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_annotations_annotation_type_post(self, body, content_type, application_token, project_id, annotation_type, **kwargs):  # noqa: E501
        """Store new task annotations for tasks of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_annotation_type_post(body, content_type, application_token, project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str content_type: Content type for post body (required)
        :param str application_token: Application token registered with TM (required)
        :param int project_id: The unique project ID (required)
        :param str annotation_type: Annotation type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_annotations_annotation_type_post_with_http_info(body, content_type, application_token, project_id, annotation_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_annotations_annotation_type_post_with_http_info(body, content_type, application_token, project_id, annotation_type, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_annotations_annotation_type_post_with_http_info(self, body, content_type, application_token, project_id, annotation_type, **kwargs):  # noqa: E501
        """Store new task annotations for tasks of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_annotation_type_post_with_http_info(body, content_type, application_token, project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str content_type: Content type for post body (required)
        :param str application_token: Application token registered with TM (required)
        :param int project_id: The unique project ID (required)
        :param str annotation_type: Annotation type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'content_type', 'application_token', 'project_id', 'annotation_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_annotations_annotation_type_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_project_project_id_task_annotations_annotation_type_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `api_v1_project_project_id_task_annotations_annotation_type_post`")  # noqa: E501
        # verify the required parameter 'application_token' is set
        if ('application_token' not in params or
                params['application_token'] is None):
            raise ValueError("Missing the required parameter `application_token` when calling `api_v1_project_project_id_task_annotations_annotation_type_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_annotations_annotation_type_post`")  # noqa: E501
        # verify the required parameter 'annotation_type' is set
        if ('annotation_type' not in params or
                params['annotation_type'] is None):
            raise ValueError("Missing the required parameter `annotation_type` when calling `api_v1_project_project_id_task_annotations_annotation_type_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_type' in params:
            path_params['annotation_type'] = params['annotation_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'application_token' in params:
            header_params['Application-Token'] = params['application_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task-annotations/{annotation_type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_annotations_get(self, project_id, annotation_type, **kwargs):  # noqa: E501
        """Get all task annotations for a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_get(project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project (required)
        :param str annotation_type: The type of annotation to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_annotations_get_with_http_info(project_id, annotation_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_annotations_get_with_http_info(project_id, annotation_type, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_annotations_get_with_http_info(self, project_id, annotation_type, **kwargs):  # noqa: E501
        """Get all task annotations for a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_get_with_http_info(project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project (required)
        :param str annotation_type: The type of annotation to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_annotations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_annotations_get`")  # noqa: E501
        # verify the required parameter 'annotation_type' is set
        if ('annotation_type' not in params or
                params['annotation_type'] is None):
            raise ValueError("Missing the required parameter `annotation_type` when calling `api_v1_project_project_id_task_annotations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_type' in params:
            path_params['annotation_type'] = params['annotation_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task-annotations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_annotations_post(self, body, content_type, application_token, project_id, annotation_type, **kwargs):  # noqa: E501
        """Store new task annotations for tasks of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_post(body, content_type, application_token, project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str content_type: Content type for post body (required)
        :param str application_token: Application token registered with TM (required)
        :param int project_id: The unique project ID (required)
        :param str annotation_type: Annotation type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_annotations_post_with_http_info(body, content_type, application_token, project_id, annotation_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_annotations_post_with_http_info(body, content_type, application_token, project_id, annotation_type, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_annotations_post_with_http_info(self, body, content_type, application_token, project_id, annotation_type, **kwargs):  # noqa: E501
        """Store new task annotations for tasks of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_annotations_post_with_http_info(body, content_type, application_token, project_id, annotation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON object for creating draft project (required)
        :param str content_type: Content type for post body (required)
        :param str application_token: Application token registered with TM (required)
        :param int project_id: The unique project ID (required)
        :param str annotation_type: Annotation type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'content_type', 'application_token', 'project_id', 'annotation_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_annotations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_project_project_id_task_annotations_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `api_v1_project_project_id_task_annotations_post`")  # noqa: E501
        # verify the required parameter 'application_token' is set
        if ('application_token' not in params or
                params['application_token'] is None):
            raise ValueError("Missing the required parameter `application_token` when calling `api_v1_project_project_id_task_annotations_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_annotations_post`")  # noqa: E501
        # verify the required parameter 'annotation_type' is set
        if ('annotation_type' not in params or
                params['annotation_type'] is None):
            raise ValueError("Missing the required parameter `annotation_type` when calling `api_v1_project_project_id_task_annotations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_type' in params:
            path_params['annotation_type'] = params['annotation_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'application_token' in params:
            header_params['Application-Token'] = params['application_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task-annotations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
