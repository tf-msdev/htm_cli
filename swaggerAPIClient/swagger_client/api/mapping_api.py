# coding: utf-8

"""
    HOT Tasking Manager API

    API endpoints for the HOT tasking manager  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MappingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_project_project_id_aoi_get(self, project_id, **kwargs):  # noqa: E501
        """Get AOI of Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_aoi_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The unique project ID (required)
        :param bool as_file: Set to false if file download not preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_aoi_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_aoi_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_aoi_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get AOI of Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_aoi_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The unique project ID (required)
        :param bool as_file: Set to false if file download not preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'as_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_aoi_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_aoi_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'as_file' in params:
            query_params.append(('as_file', params['as_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/aoi', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_get(self, accept_language, project_id, **kwargs):  # noqa: E501
        """Get HOT Project for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_get(accept_language, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The unique project ID (required)
        :param bool as_file: Set to true if file download is preferred
        :param bool abbreviated: Set to true if only state information is desired
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_get_with_http_info(accept_language, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_get_with_http_info(accept_language, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_get_with_http_info(self, accept_language, project_id, **kwargs):  # noqa: E501
        """Get HOT Project for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_get_with_http_info(accept_language, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The unique project ID (required)
        :param bool as_file: Set to true if file download is preferred
        :param bool abbreviated: Set to true if only state information is desired
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'project_id', 'as_file', 'abbreviated']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_project_id_get`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'as_file' in params:
            query_params.append(('as_file', params['as_file']))  # noqa: E501
        if 'abbreviated' in params:
            query_params.append(('abbreviated', params['abbreviated']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_has_user_locked_tasks_details_get(self, authorization, accept_language, project_id, **kwargs):  # noqa: E501
        """Gets details of any locked task on the project from logged in user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_has_user_locked_tasks_details_get(authorization, accept_language, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_has_user_locked_tasks_details_get_with_http_info(authorization, accept_language, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_has_user_locked_tasks_details_get_with_http_info(authorization, accept_language, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_has_user_locked_tasks_details_get_with_http_info(self, authorization, accept_language, project_id, **kwargs):  # noqa: E501
        """Gets details of any locked task on the project from logged in user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_has_user_locked_tasks_details_get_with_http_info(authorization, accept_language, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_has_user_locked_tasks_details_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_project_project_id_has_user_locked_tasks_details_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_project_id_has_user_locked_tasks_details_get`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_has_user_locked_tasks_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/has-user-locked-tasks/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_has_user_locked_tasks_get(self, authorization, project_id, **kwargs):  # noqa: E501
        """Gets any locked task on the project from logged in user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_has_user_locked_tasks_get(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_has_user_locked_tasks_get_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_has_user_locked_tasks_get_with_http_info(authorization, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_has_user_locked_tasks_get_with_http_info(self, authorization, project_id, **kwargs):  # noqa: E501
        """Gets any locked task on the project from logged in user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_has_user_locked_tasks_get_with_http_info(authorization, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_has_user_locked_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_project_project_id_has_user_locked_tasks_get`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_has_user_locked_tasks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/has-user-locked-tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_summary_get(self, accept_language, project_id, **kwargs):  # noqa: E501
        """Gets project summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_summary_get(accept_language, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_summary_get_with_http_info(accept_language, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_summary_get_with_http_info(accept_language, project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_summary_get_with_http_info(self, accept_language, project_id, **kwargs):  # noqa: E501
        """Gets project summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_summary_get_with_http_info(accept_language, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_project_id_summary_get`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_task_id_comment_post(self, body, authorization, project_id, task_id, **kwargs):  # noqa: E501
        """Adds a comment to the task outside of mapping/validation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_comment_post(body, authorization, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskComment body: JSON object representing the comment (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_task_id_comment_post_with_http_info(body, authorization, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_task_id_comment_post_with_http_info(body, authorization, project_id, task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_task_id_comment_post_with_http_info(self, body, authorization, project_id, task_id, **kwargs):  # noqa: E501
        """Adds a comment to the task outside of mapping/validation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_comment_post_with_http_info(body, authorization, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskComment body: JSON object representing the comment (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'project_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_task_id_comment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_project_project_id_task_task_id_comment_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_project_project_id_task_task_id_comment_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_task_id_comment_post`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_project_project_id_task_task_id_comment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task/{task_id}/comment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_task_id_get(self, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Get task for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_get(accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :param str authorization: Base64 encoded session token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_task_id_get_with_http_info(accept_language, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_task_id_get_with_http_info(accept_language, project_id, task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_task_id_get_with_http_info(self, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Get task for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_get_with_http_info(accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :param str authorization: Base64 encoded session token
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'project_id', 'task_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_task_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_project_id_task_task_id_get`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_task_id_get`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_project_project_id_task_task_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task/{task_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_task_id_lock_for_mapping_post(self, authorization, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Locks the task for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_lock_for_mapping_post(authorization, accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_task_id_lock_for_mapping_post_with_http_info(authorization, accept_language, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_task_id_lock_for_mapping_post_with_http_info(authorization, accept_language, project_id, task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_task_id_lock_for_mapping_post_with_http_info(self, authorization, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Locks the task for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_lock_for_mapping_post_with_http_info(authorization, accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'project_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_task_id_lock_for_mapping_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_project_project_id_task_task_id_lock_for_mapping_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_project_id_task_task_id_lock_for_mapping_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_task_id_lock_for_mapping_post`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_project_project_id_task_task_id_lock_for_mapping_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task/{task_id}/lock-for-mapping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_task_id_stop_mapping_post(self, body, authorization, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Unlock task that is locked for mapping resetting it to it's last status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_stop_mapping_post(body, authorization, accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskUpdateStop body: JSON object for unlocking a task (required)
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_task_id_stop_mapping_post_with_http_info(body, authorization, accept_language, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_task_id_stop_mapping_post_with_http_info(body, authorization, accept_language, project_id, task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_task_id_stop_mapping_post_with_http_info(self, body, authorization, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Unlock task that is locked for mapping resetting it to it's last status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_stop_mapping_post_with_http_info(body, authorization, accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskUpdateStop body: JSON object for unlocking a task (required)
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'accept_language', 'project_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_task_id_stop_mapping_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_project_project_id_task_task_id_stop_mapping_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_project_project_id_task_task_id_stop_mapping_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_project_id_task_task_id_stop_mapping_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_task_id_stop_mapping_post`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_project_project_id_task_task_id_stop_mapping_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task/{task_id}/stop-mapping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_task_id_undo_mapping_post(self, authorization, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Get task for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_undo_mapping_post(authorization, accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_task_id_undo_mapping_post_with_http_info(authorization, accept_language, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_task_id_undo_mapping_post_with_http_info(authorization, accept_language, project_id, task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_task_id_undo_mapping_post_with_http_info(self, authorization, accept_language, project_id, task_id, **kwargs):  # noqa: E501
        """Get task for mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_undo_mapping_post_with_http_info(authorization, accept_language, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Base64 encoded session token (required)
        :param str accept_language: Language user is requesting (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'project_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_task_id_undo_mapping_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_project_project_id_task_task_id_undo_mapping_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `api_v1_project_project_id_task_task_id_undo_mapping_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_task_id_undo_mapping_post`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_project_project_id_task_task_id_undo_mapping_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task/{task_id}/undo-mapping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_task_task_id_unlock_after_mapping_post(self, body, authorization, project_id, task_id, **kwargs):  # noqa: E501
        """Unlocks the task after mapping completed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_unlock_after_mapping_post(body, authorization, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskUpdateUnlock body: JSON object for unlocking a task (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_task_task_id_unlock_after_mapping_post_with_http_info(body, authorization, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_task_task_id_unlock_after_mapping_post_with_http_info(body, authorization, project_id, task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_task_task_id_unlock_after_mapping_post_with_http_info(self, body, authorization, project_id, task_id, **kwargs):  # noqa: E501
        """Unlocks the task after mapping completed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_task_task_id_unlock_after_mapping_post_with_http_info(body, authorization, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskUpdateUnlock body: JSON object for unlocking a task (required)
        :param str authorization: Base64 encoded session token (required)
        :param int project_id: The ID of the project the task is associated with (required)
        :param int task_id: The unique task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'project_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_task_task_id_unlock_after_mapping_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_project_project_id_task_task_id_unlock_after_mapping_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `api_v1_project_project_id_task_task_id_unlock_after_mapping_post`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_task_task_id_unlock_after_mapping_post`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_project_project_id_task_task_id_unlock_after_mapping_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/task/{task_id}/unlock-after-mapping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_tasks_as_gpx_get(self, project_id, **kwargs):  # noqa: E501
        """Get tasks as GPX  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_tasks_as_gpx_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project the task is associated with (required)
        :param str tasks: List of tasks; leave blank for all
        :param bool as_file: Set to true if file download preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_tasks_as_gpx_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_tasks_as_gpx_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_tasks_as_gpx_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get tasks as GPX  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_tasks_as_gpx_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project the task is associated with (required)
        :param str tasks: List of tasks; leave blank for all
        :param bool as_file: Set to true if file download preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'tasks', 'as_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_tasks_as_gpx_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_tasks_as_gpx_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'tasks' in params:
            query_params.append(('tasks', params['tasks']))  # noqa: E501
        if 'as_file' in params:
            query_params.append(('as_file', params['as_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/tasks_as_gpx', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_tasks_as_osm_xml_get(self, project_id, **kwargs):  # noqa: E501
        """Get tasks as OSM XML  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_tasks_as_osm_xml_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project the task is associated with (required)
        :param str tasks: List of tasks; leave blank to retrieve all
        :param bool as_file: Set to true if file download preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_tasks_as_osm_xml_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_tasks_as_osm_xml_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_tasks_as_osm_xml_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get tasks as OSM XML  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_tasks_as_osm_xml_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project the task is associated with (required)
        :param str tasks: List of tasks; leave blank to retrieve all
        :param bool as_file: Set to true if file download preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'tasks', 'as_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_tasks_as_osm_xml_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_tasks_as_osm_xml_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'tasks' in params:
            query_params.append(('tasks', params['tasks']))  # noqa: E501
        if 'as_file' in params:
            query_params.append(('as_file', params['as_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/tasks-as-osm-xml', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_project_project_id_tasks_get(self, project_id, **kwargs):  # noqa: E501
        """Get tasks as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_tasks_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project the task is associated with (required)
        :param bool as_file: Set to true if file download preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_project_project_id_tasks_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_project_project_id_tasks_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def api_v1_project_project_id_tasks_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get tasks as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_project_project_id_tasks_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The ID of the project the task is associated with (required)
        :param bool as_file: Set to true if file download preferred
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'as_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_project_project_id_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `api_v1_project_project_id_tasks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'as_file' in params:
            query_params.append(('as_file', params['as_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/project/{project_id}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
